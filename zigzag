/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if (root == null)
	            return new ArrayList<>();

	        Queue<TreeNode> q = new LinkedList<>();
	        List<List<Integer>> res = new ArrayList<>();

	        // Enqueue Root
	        q.offer(root);
	        int currLevel = 0;
	        

	        while(!q.isEmpty())
	        {
	        	int len = q.size();
	        	q.peek();
	        	res.add(new ArrayList<>());
	        	for(int i=0;i<len;i++)
	        	{
	        		TreeNode node = q.poll();
	        		res.get(currLevel).add(node.val);

	        		if(node.left!=null)
	        			q.offer(node.left);

	        		if(node.right!=null)
	        			q.offer(node.right);
	        	}
	        	
	        	if(currLevel%2!=0)
	        	{	        		
	        		Collections.reverse(res.get(currLevel));
	        	}
	        	currLevel++;
	        }

	        return res;
    }
}
